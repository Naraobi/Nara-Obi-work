import pygame
import sys
import random
import mysql.connector
from pygame.math import Vector2 

# Initialize Pygame and the mixer module for playing sound effects and music
pygame.init()
pygame.mixer.init()

# Load background music
pygame.mixer.music.load('ROSÃ‰___Bruno_Mars_-_APT.__Official_Music_Video_(256k).mp3')
pygame.mixer.music.play(loops=-1)

# Load sound effects
collision_sound = pygame.mixer.Sound('Gameover.mp3')
eat_sound = pygame.mixer.Sound('Mp3 Editor_241102151859.mp3')

# Game settings
snake_speed = 5
cell_size = 30
number_cell = 25
font = pygame.font.SysFont("bahnschrift", 25)
scorefont = pygame.font.SysFont("bahnschrift", 25)

# Set up the display window
screen = pygame.display.set_mode((cell_size * number_cell, cell_size * number_cell))
food_surface = pygame.image.load("cherry.png")
clock = pygame.time.Clock()

# Define colors
white = (255, 255, 255)
black = (0, 0, 0)
lightpink = (255, 182, 193)
red = (255, 0, 0)

# Function to get player name
def get_player_name():
    name = ''
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN and name:
                    return name
                if event.key == pygame.K_BACKSPACE:
                    name = name[:-1]
                else:
                    name += event.unicode

        screen.fill(lightpink)
        input_surface = font.render(f"Enter your name: {name}", True, black)
        screen.blit(input_surface, (10, 10))
        pygame.display.update()

# Database function to insert game stats
def insert_game_stats(player_name, score, difficulty):
    connection = mysql.connector.connect(
        host='localhost',
        user='root',
        password='Chinara16@',
        database='game'
    )
    cursor = connection.cursor()
    cursor.execute('''
        INSERT INTO GameStats (player_name, score, difficulty)
        VALUES (%s, %s, %s)
    ''', (player_name, score, difficulty))
    connection.commit()
    cursor.close()
    connection.close()
player_name = get_player_name()
# Define the Snake class
class Snake:
    def __init__(self):
        self.body = [Vector2(6, 9), Vector2(5, 9), Vector2(4, 9)]
        self.direction = Vector2(1, 0)
        self.add_segment = False

    def draw(self):
        for segment in self.body:
            segment_rect = (segment.x * cell_size, segment.y * cell_size, cell_size, cell_size)
            pygame.draw.rect(screen, black, segment_rect, 0, 7)

    def update(self):
        self.body.insert(0, self.body[0] + self.direction)
        # Wrap around the screen
        self.body[0].x %= number_cell
        self.body[0].y %= number_cell
        
        if self.add_segment:
            self.add_segment = False  # Reset after adding a segment
        else:
            self.body.pop()  # Remove the last segment if not eating

    def reset(self):
        self.body = [Vector2(6, 9), Vector2(5, 9), Vector2(4, 9)]
        self.direction = Vector2(1, 0)

# Define the Food class
class Food:
    def __init__(self, snake_body):
        self.position = self.randomize_position(snake_body)
        self.color = red

    def draw(self):
        rect = pygame.Rect(self.position.x * cell_size, self.position.y * cell_size, cell_size, cell_size)
        screen.blit(food_surface, rect)

    def randomize_cell(self):
        return Vector2(random.randint(0, number_cell - 1), random.randint(0, number_cell - 1))

    def randomize_position(self, snake_body):
        position = self.randomize_cell()
        while position in snake_body:
            position = self.randomize_cell()
        return position

# Define the Game class
class Game:
    def __init__(self):
        self.snake = Snake()
        self.food = Food(self.snake.body)
        self.score = 0
        self.difficulty = "Easy"

    def draw(self):
        self.food.draw()
        self.snake.draw()
        difficulty_surface = font.render(self.difficulty, True, black)
        screen.blit(difficulty_surface, (cell_size * number_cell // 2 - difficulty_surface.get_width() // 2, 5))

    def update(self):
        self.snake.update()
        self.check_collision_with_food()
        self.check_collision_with_tail()

    def check_collision_with_food(self):
        if self.snake.body[0] == self.food.position:
            self.food.position = self.food.randomize_position(self.snake.body)
            self.snake.add_segment = True  # Set the flag to grow the snake
            self.score += 1
            global snake_speed
            eat_sound.play()
            if self.score == 8:
                snake_speed += 4
                self.difficulty = "Medium"
            elif self.score >= 16 and (self.score - 16) % 16 == 0:
                snake_speed += 6
                self.difficulty = "Hard"

    def show_restart_message(self, player_name):
        insert_game_stats(player_name, self.score, self.difficulty)  # Save stats on game over
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
            screen.fill(white)
            message = font.render("Press C to continue or E to exit", True, black)
            message_rect = message.get_rect(center=(cell_size * number_cell // 2, cell_size * number_cell // 2))
            screen.blit(message, message_rect)
            pygame.display.update()
            keys = pygame.key.get_pressed()
            if keys[pygame.K_c]:
                self.reset_game()
                return
            if keys[pygame.K_e]:
                pygame.quit()
                sys.exit()

    def reset_game(self):
        global snake_speed
        self.snake.reset()
        self.food.position = self.food.randomize_position(self.snake.body)
        self.score = 0
        self.difficulty = "Easy"
        snake_speed = 5
        pygame.mixer.music.play(loops=-1)

    def check_collision_with_tail(self):
        if self.snake.body[0] in self.snake.body[1:]:
            pygame.mixer.music.stop()
            collision_sound.play()
            self.show_restart_message(player_name)

# Main function
def main():
    pygame.display.set_caption('Snake Game')
    game = Game()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and game.snake.direction != Vector2(0, 1):
                    game.snake.direction = Vector2(0, -1)
                if event.key == pygame.K_DOWN and game.snake.direction != Vector2(0, -1):
                    game.snake.direction = Vector2(0, 1)
                if event.key == pygame.K_LEFT and game.snake.direction != Vector2(1, 0):
                    game.snake.direction = Vector2(-1, 0)
                if event.key == pygame.K_RIGHT and game.snake.direction != Vector2(-1, 0):
                    game.snake.direction = Vector2(1, 0)

        screen.fill(lightpink)
        game.update()
        game.draw()
        score_surface = scorefont.render(f"Score: {game.score}", True, black)
        screen.blit(score_surface, (5, 10))
        pygame.display.update()
        clock.tick(snake_speed)

if __name__ == "__main__":
    main()
