import pygame
import sys
import random
from pygame.math import Vector2

pygame.init()
pygame.mixer.init()

# Load background music
pygame.mixer.music.load('ROSÃ‰___Bruno_Mars_-_APT.__Official_Music_Video_(256k).mp3')
pygame.mixer.music.play(loops=-1)

# Load the collision sound
collision_sound = pygame.mixer.Sound('Snake_Sound_Effect.mp3')  # Make sure to replace with your sound file

snake_speed = 5
cell_size = 30
number_cell = 25 
font = pygame.font.SysFont("bahnschrift", 25)
scorefont = pygame.font.SysFont("bahnschrift", 25)

# Set up the display
screen = pygame.display.set_mode((cell_size * number_cell, cell_size * number_cell))
food_surface = pygame.image.load("snakefoods.png")
clock = pygame.time.Clock()

# Define colors
white = (255, 255, 255)
black = (0, 0, 0)
lightpink = (255, 182, 193)
red = (255, 0, 0)

class Snake:
    def __init__(self):
        self.body = [Vector2(6, 9), Vector2(5, 9), Vector2(4, 9)]
        self.direction = Vector2(1, 0)
        self.add_segment = False

    def draw(self):
        for segment in self.body:
            segment_rect = (segment.x * cell_size, segment.y * cell_size, cell_size, cell_size)
            pygame.draw.rect(screen, black, segment_rect, 0, 7)

    def update(self):
        self.body.insert(0, self.body[0] + self.direction)

        # Wrap around the screen
        if self.body[0].x >= number_cell:
            self.body[0].x = 0
        elif self.body[0].x < 0:
            self.body[0].x = number_cell - 1
        
        if self.body[0].y >= number_cell:
            self.body[0].y = 0
        elif self.body[0].y < 0:
            self.body[0].y = number_cell - 1

        if self.add_segment:
            self.add_segment = False
        else:
            self.body = self.body[:-1]

    def reset(self):
        self.body = [Vector2(6, 9), Vector2(5, 9), Vector2(4, 9)]
        self.direction = Vector2(1, 0)

class Food:
    def __init__(self, snake_body):
        self.position = self.randomize_position(snake_body)
        self.color = red

    def draw(self):
        rect = pygame.Rect(self.position.x * cell_size, self.position.y * cell_size, cell_size, cell_size)
        screen.blit(food_surface, rect)

    def randomize_cell(self):
        x = random.randint(0, number_cell - 1)
        y = random.randint(0, number_cell - 1)
        return Vector2(x, y)

    def randomize_position(self, snake_body):
        position = self.randomize_cell()
        while position in snake_body:
            position = self.randomize_cell() 
        return position

class Game:
    def __init__(self):
        self.snake = Snake()
        self.food = Food(self.snake.body)
        self.score = 0
        self.difficulty = "Easy"  # Initial difficulty level

    def draw(self):
        self.food.draw()
        self.snake.draw()

        # Render the difficulty level
        difficulty_surface = font.render(self.difficulty, True, black)
        screen.blit(difficulty_surface, (cell_size * number_cell // 2 - difficulty_surface.get_width() // 2, 5))

    def update(self): 
        self.snake.update()
        self.check_collision_with_food()
        self.check_collision_with_tail()

    def check_collision_with_food(self):
        if self.snake.body[0] == self.food.position:
            self.food.position = self.food.randomize_position(self.snake.body)
            self.snake.add_segment = True
            self.score += 1
            
            global snake_speed
            
            # Update speed and difficulty
            if self.score == 8:
                snake_speed += 4
                self.difficulty = "Medium"  # Change difficulty to Medium
            elif self.score >= 16 and (self.score - 16) % 16 == 0:
                snake_speed += 6
                self.difficulty = "Hard"  # Change difficulty to Hard

    def show_restart_message(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
            screen.fill(white)

            # Calculate the position to center the message on the screen
            message = font.render("Press C to continue or E to exit", True, black)
            message_rect = message.get_rect(center=(cell_size * number_cell // 2, cell_size * number_cell // 2))
            screen.blit(message, message_rect)

            pygame.display.update()

            keys = pygame.key.get_pressed()
            if keys[pygame.K_c]:
                self.reset_game()  # Reset game if continuing
                return
            if keys[pygame.K_e]:
                pygame.quit()
                sys.exit()

    def reset_game(self):
        global snake_speed  # Declare snake_speed as global
        self.snake.reset()
        self.food.position = self.food.randomize_position(self.snake.body)
        self.score = 0
        self.difficulty = "Easy"  # Reset difficulty to Easy
        snake_speed = 6  # Reset speed to the original speed
        pygame.mixer.music.stop()  # Stop the current music
        pygame.mixer.music.play(loops=-1)  # Restart the music

    def check_collision_with_tail(self):
        headless_body = self.snake.body[1:]

        # Check if the head collides with the tail
        if self.snake.body[0] in headless_body:
            print("Collision detected!")  # Debugging line
            collision_sound.play()  # Play the collision sound
            self.show_restart_message()  # Show message on self-collision

def main():
    pygame.display.set_caption('Snake Game')
    game = Game()

    while True: 
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and game.snake.direction != Vector2(0, 1):
                    game.snake.direction = Vector2(0, -1)
                if event.key == pygame.K_DOWN and game.snake.direction != Vector2(0, -1):
                    game.snake.direction = Vector2(0, 1)
                if event.key == pygame.K_LEFT and game.snake.direction != Vector2(1, 0):
                    game.snake.direction = Vector2(-1, 0)
                if event.key == pygame.K_RIGHT and game.snake.direction != Vector2(-1, 0):
                    game.snake.direction = Vector2(1, 0)

        screen.fill(lightpink)
        game.update()  
        game.draw()
        score_surface = scorefont.render(f"Score: {game.score}", True, black)
        screen.blit(score_surface, (5, 10))
        pygame.display.update()
        clock.tick(snake_speed)

if __name__ == "__main__":
    main()
